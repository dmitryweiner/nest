{"version":3,"sources":["components/RangeWithButtons/styles.module.css","utils.js","demo-data/coords-with-numbers.js","components/RangeWithButtons/index.jsx","App.js","demo-data/coords-with-dates.js","index.js"],"names":["module","exports","parseFloat","string","parsedString","replace","Number","parseString","inputFormat","parts","split","nest","id","nanoid","title","x","y","date","dateIndex","distances","deltaDistances","neighborsCount","r","isAccepted","getSortedDistancesToNeighbors","currentNest","nests","distance","Math","sqrt","pow","push","sort","a","b","getDeltaDistancesToNeighbors","deltas","i","length","maxDelta","max","map","delta","isNestAccepted","firstCount","currentDayIndex","r_avav","r_av","calculateR","loop_limit","i_max","calculateRforSpecificDay","getResultForNest","dayIndex","resultStr","toFixed","resultToString","getResultByDate","notNullR","filter","setDistancesAndDeltas","parseDate","dateStr","Date","parseInt","getAllNestsForSpecificDay","RangeWithButtons","value","min","onChange","className","styles","rangeBlock","onClick","rangeInput","type","e","target","App","useState","nestDataText","setNestDataText","nestData","setNestData","dates","setDates","selectedDate","setSelectedDate","setInputFormat","withHeader","setWithHeader","setFirstCount","selectedNest","setSelectedNest","anyChartDistances","anychart","line","anyChartMap","bubble","setTestData","minBubbleSize","maxBubbleSize","useEffect","result","strings","first","utils","Set","indexOf","currentDateIndex","chartData","dataSet","data","set","seriesData_1","mapAs","seriesData_2","setDistancesGraphData","accepted","notAccepted","setMapGraphData","href","name","checked","rows","instance","height","calculate","encodeURIComponent","download","readOnly","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb5d55ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeBlock\":\"styles_rangeBlock__SIP4b\",\"rangeInput\":\"styles_rangeInput__1-XQv\"};","import { nanoid } from 'nanoid';\n\nexport const INPUT_FORMAT_COORDINATES = 1;\nexport const INPUT_FORMAT_NUMBER = 2;\nexport const INPUT_FORMAT_DATE = 3;\n\nexport function parseFloat(string) {\n  const parsedString = string.replace(',', '.');\n  return Number.parseFloat(parsedString);\n}\n\nexport function parseString(string, inputFormat) {\n  const parts = string.split(/\\s/);\n  const nest = {\n    id: nanoid(),\n    title: '',\n    x: 0,\n    y: 0,\n    date: null,\n    dateIndex: 0,\n    distances: [],\n    deltaDistances: [],\n    neighborsCount: [0],\n    r: [0],\n    isAccepted: [false]\n  };\n  switch (inputFormat) {\n    case INPUT_FORMAT_COORDINATES:\n      nest.x = parseFloat(parts[0]);\n      nest.y = parseFloat(parts[1]);\n      break;\n    case INPUT_FORMAT_NUMBER:\n      nest.title = parts[0];\n      nest.x = parseFloat(parts[1]);\n      nest.y = parseFloat(parts[2]);\n      break;\n    case INPUT_FORMAT_DATE:\n      nest.title = parts[0];\n      nest.date = parts[1];\n      nest.x = parseFloat(parts[2]);\n      nest.y = parseFloat(parts[3]);\n      break;\n    default:\n  }\n  return nest;\n}\n\nexport function parseNestData(nestDataText, inputFormat, withHeader) {\n  let result = [];\n  const strings = nestDataText.split(/[\\r\\n]+/);\n  let first = true;\n  for (const string of strings) {\n    if (withHeader && first) {\n      first = false;\n      continue;\n    }\n    if (string === '') continue;\n    result.push(parseString(string, inputFormat));\n  }\n  return result;\n}\n\n/**\n * Метод вычисляет расстояния от текущего гнезда до всез остальных гнёзд\n *\n * @param {Nest} currentNest текущее гнездо\n * @param {Nest[]} nests все гнёзда\n * @returns {[number]}\n */\nexport function getSortedDistancesToNeighbors(currentNest, nests) {\n  /*\n    procedure Calc_date(list_in: TList);\n    var\n      i, j, k: integer;\n      L: TList;\n      Rast: real;\n      p1, p2: ^nestpoint;\n      temp_d, temp1_d: ^dot;\n      changed: boolean;\n      p_real: ^real;\n    begin\n      L := TList.Create;\n      for i := 0 to (List_in.Count - 1) do\n      begin\n        //заполняем список\n        for j := 0 to (List_in.Count - 1) do\n        begin\n          if (i <> j) then\n          begin\n            p1 := List_in.Items[i];\n            p2 := List_in.Items[j];\n            //деление на 2, т.к. необходима ПОЛОВИНА расстояний (confirmed by Alexey)\n            rast := (sqrt(sqr(p1^.x - p2^.x) + sqr(p1^.y - p2^.y))) / 2;\n            new(temp_d);\n            temp_d^.N := p2^.N;\n            temp_d^.R := rast;\n            L.Add(temp_d);\n            temp_d := nil;\n          end;//if\n        end;//for\n        //cортировка\n        changed := True;\n        while changed do\n        begin\n          changed := False;\n          for k := 0 to (L.Count - 2) do\n          begin\n            temp_d := L.Items[k];\n            temp1_d := L.Items[k + 1];\n            if temp1_d^.R < temp_d^.R then\n            begin\n              L.Exchange(k, k + 1);\n              Changed := True;\n            end;\n          end;//for\n        end;//while\n        //закидываем всё в Rast[]\n        p1 := List_in.Items[i];\n        p1^.Rast.Clear;\n        for k := 0 to (L.Count - 1) do\n        begin\n          temp_d := L.Items[k];\n          New(p_real);\n          p_real^ := temp_d^.R;\n          p1^.Rast.Add(p_real);\n        end;\n        L.Clear;\n      end;\n    end;// Calc_date;\n   */\n  const distances = [];\n  for (const nest of nests) {\n    if (nest.id === currentNest.id) continue;\n    const distance =\n      Math.sqrt(Math.pow(nest.x - currentNest.x, 2) + Math.pow(nest.y - currentNest.y, 2)) / 2;\n    distances.push(distance);\n  }\n  distances.sort((a, b) => a - b);\n  return distances;\n}\n\n/**\n * Метод вычисляет дельту между расстояниями для конкретного гнезда\n * Своего рода производная по расстояниям\n *\n * @param {number[]} distances\n * @returns {number[]}\n */\nexport function getDeltaDistancesToNeighbors(distances) {\n  /*\n    procedure DeltaCalc_date(list_in: TList);\n    var\n      p1: ^nestpoint;\n      max: real;\n      i, k: integer;\n      p_real_1, p_real_2, p_real_3: ^real;\n    begin\n      for k := 0 to (list_in.Count - 1) do\n      begin\n        p1 := list_in.Items[k];\n        //вычисление дельты\n        p1^.Delta_Rast.Clear;\n        for i := 0 to p1^.Rast.Count - 2 do\n        begin\n          p_real_1 := p1^.Rast.Items[i + 1];\n          p_real_2 := p1^.Rast.Items[i];\n          New(p_real_3);\n          p_real_3^ := p_real_1^ - p_real_2^;\n          p1^.Delta_Rast.Add(p_real_3);\n        end;\n        //поиск максимальной\n        max := 0;\n        for i := 0 to p1^.Delta_Rast.Count - 1 do\n        begin\n          p_real_1 := p1^.Delta_Rast.Items[i];\n          if p_real_1^ > max then\n            max := p_real_1^;\n        end;\n        //нормализация\n        if max > 0 then\n          for i := 0 to p1^.Delta_Rast.Count - 1 do\n          begin\n            p_real_1 := p1^.Delta_Rast.Items[i];\n            p_real_1^ := p_real_1^ / max;\n          end;\n      end;//for\n    end;// DeltaCalc_date;\n   */\n  const deltas = [];\n  for (let i = 0; i < distances.length - 1; i++) {\n    deltas.push(distances[i + 1] - distances[i]);\n  }\n  const maxDelta = Math.max(...deltas);\n  return deltas.map(delta => delta / maxDelta);\n}\n\n/**\n * Метод определяет, рассчитывать ли среднее расстояние до ближайших гнёзд для\n * этого конкретного гнезда.\n *\n * Вначале мы считаем среднее расстояние до firstCount ближайших соседей для\n * каждого гнезда, кроме текущего. Это r_av.\n *\n * Потом мы считаем среднее этих средних расстояний r_avav.\n *\n * Если расстояние до ПЕРВОГО соседа у текущего гнезда больше или равно r_avav,\n * то гнездо участвует в дальнейшем расчёте. Т.е. гнездо не одиночное, у него\n * есть соседи.\n *\n * @param {Nest} currentNest\n * @param {Nest[]} nests\n * @param {number} firstCount\n * @param {number} [currentDayIndex]\n * @returns {boolean}\n */\nexport function isNestAccepted(currentNest, nests, firstCount, currentDayIndex = 0) {\n  /*\n    procedure SelectNeibs(List_in: TList);\n    var\n      p1, p2: ^nestpoint;\n      i, j, k, Count: integer;\n      r_av, r_avav: real;\n      p_real: ^real;\n    begin\n      for i := 0 to (List_in.Count - 1) do\n      begin\n        //вычисление R ср. ср.\n        Count := 0;\n        r_avav := 0;\n        for j := 0 to (List_in.Count - 1) do\n        begin\n          r_av := 0;\n          p1 := List_in.Items[i];\n          p2 := List_in.Items[j];\n          if p1^.N <> p2^.N then\n          begin\n            for k := 1 to (Form1.ComboBox1.ItemIndex + 1) do\n            begin\n              if (k - 1) < p2^.rast.Count then\n              begin\n                p_real := p2^.rast.Items[k - 1];\n                r_av := r_av + p_real^;\n              end;\n            end;\n            r_av := r_av / (form1.ComboBox1.ItemIndex + 1);\n            r_avav := r_avav + r_av;\n            Count := Count + 1;\n          end;\n        end;//while\n        r_avav := r_avav / Count;\n        //вывод\n        p_real := p1^.Rast.Items[0];\n        if r_avav < p_real^ then\n        begin\n          p1^.Attempted := False;\n        end\n        else\n        begin\n          p1^.Attempted := True;\n        end;\n      end;//for\n    end;//selectNeibs\n   */\n  let r_avav = 0;\n  for (const nest of nests) {\n    let r_av = 0;\n    if (nest.id === currentNest.id) continue;\n\n    for (let i = 0; i < firstCount; i++) {\n      if (nest.distances[currentDayIndex]) {\n        // TODO: что-то здесь странное\n        r_av += nest.distances[currentDayIndex][i];\n      }\n    }\n\n    r_av = r_av / firstCount;\n    r_avav += r_av;\n  }\n  r_avav = r_avav / (nests.length - 1);\n  return (\n    currentNest.distances[currentDayIndex] && r_avav >= currentNest.distances[currentDayIndex][0]\n  );\n}\n\n/**\n * Ключевая функция расчёта среднего расстояния до соседей.\n * 1. Определяем, скольких ближайших соседей анализировать (6 или сколько есть).\n * 2. Находим среди них максимальную дельту расстояний. Считаем, что этот пик\n * на графике ограничивает зону \"настоящих\" соседей.\n * 3. Для этой дельты находим номер соседа.\n * 4. Чисто соседей: номер соседа + 1.\n * 5. Среднее расстояние: сумма расстояний до соседей / число соседей.\n *\n * @param {Nest} nest\n * @param {number} [currentDayIndex]\n * @returns {{r: number, neighborsCount: number}}\n */\nexport function calculateR(nest, currentDayIndex = 0) {\n  /*\n      max := 0;\n      i_max := 1;\n      if p1^.Delta_Rast.Count > 6 then\n        loop_limit := 5 //6 neibors\n      else\n        loop_limit := p1^.Delta_Rast.Count - 1; //if less than 6\n      for i := 1 to loop_limit do\n      begin\n        p_real := p1^.Delta_Rast.Items[i];\n        if (p_real^ > max) then\n        begin\n          max := p_real^;\n          i_max := i;\n        end;//if\n      end;\n      r := 0;\n      for i := 0 to i_max do\n      begin\n        p_real := p1^.Rast.Items[i];\n        r := r + p_real^;\n      end;\n      r := r / (i_max + 1);\n      p1^.R_av := r;\n      Set_R_and_Date(p1^.N, r, day);\n      p1^.Neib_Count := i_max + 1;\n   */\n  let maxDelta = 0;\n  let i_max = 0;\n  let loop_limit;\n  let r = 0;\n\n  if (nest.deltaDistances[currentDayIndex].length > 6) {\n    loop_limit = 5; //6 neibors\n  } else {\n    loop_limit = nest.deltaDistances[currentDayIndex].length - 1; //if less than 6\n  }\n\n  for (let i = 1; i <= loop_limit; i++) {\n    if (nest.deltaDistances[currentDayIndex][i] > maxDelta) {\n      maxDelta = nest.deltaDistances[currentDayIndex][i];\n      i_max = i;\n    }\n  }\n\n  for (let i = 0; i <= i_max; i++) {\n    r += nest.distances[currentDayIndex][i];\n  }\n  r = r / (i_max + 1);\n  return { r, neighborsCount: i_max + 1 };\n}\n\nexport function calculateRforSpecificDay(nests, firstCount, dateIndex = 0) {\n  for (const currentNest of nests) {\n    currentNest.isAccepted[dateIndex] = isNestAccepted(currentNest, nests, firstCount, dateIndex);\n    if (currentNest.isAccepted[dateIndex]) {\n      const { r, neighborsCount } = calculateR(currentNest, dateIndex);\n      currentNest.r[dateIndex] = r;\n      currentNest.neighborsCount[dateIndex] = neighborsCount;\n    }\n  }\n}\n\nfunction getResultForNest(nest, dayIndex = 0) {\n  let resultStr = `${nest.title ? nest.title : nest.id}\\t`;\n  if (nest.isAccepted[dayIndex]) {\n    resultStr += `${nest.r[dayIndex] ? nest.r[dayIndex].toFixed(3) : ''}\\t${\n      nest.neighborsCount[dayIndex] ? nest.neighborsCount[dayIndex] : ''\n    }`;\n  } else {\n    resultStr += `NAN\\t0`;\n  }\n  resultStr += `\\n`;\n  return resultStr;\n}\n\nexport function getResultByDate(nests, dateIndex) {\n  const header = 'Number\\tR\\tNeib\\n';\n  let resultStr = '';\n\n  resultStr = `${header}`;\n  for (const nest of nests) {\n    resultStr += getResultForNest(nest, dateIndex);\n  }\n\n  return resultStr;\n}\n\nexport function resultToString(nests, inputFormat) {\n  let resultStr = '';\n\n  switch (inputFormat) {\n    case INPUT_FORMAT_NUMBER:\n    case INPUT_FORMAT_COORDINATES: {\n      resultStr = getResultByDate(nests, 0);\n      break;\n    }\n    case INPUT_FORMAT_DATE: {\n      resultStr += `Number\\tR0\\tRk\\n`;\n      for (const nest of nests) {\n        const notNullR = nest.r.filter(r => r > 0);\n        resultStr += `${nest.title}\\t`;\n        if (notNullR.length) {\n          resultStr += `${notNullR[0].toFixed(3)}\\t${notNullR[notNullR.length - 1].toFixed(3)}\\n`;\n        } else {\n          resultStr += 'NAN\\tNAN\\n';\n        }\n      }\n      break;\n    }\n  }\n\n  return resultStr;\n}\n\n/**\n * Расчёт расстояний и дельт, сохранение их в объекте гнезда\n *\n * @param {Nest[]} nests\n * @param {number} [currentDayIndex]\n */\nexport function setDistancesAndDeltas(nests, currentDayIndex = 0) {\n  for (const currentNest of nests) {\n    const distances = getSortedDistancesToNeighbors(currentNest, nests);\n    const deltaDistances = getDeltaDistancesToNeighbors(distances);\n    currentNest.distances[currentDayIndex] = distances;\n    currentNest.deltaDistances[currentDayIndex] = deltaDistances;\n  }\n}\n\nfunction parseDate(dateStr) {\n  const parts = dateStr.split('.');\n  return new Date(parseInt(parts[2], 10), parseInt(parts[1], 10) - 1, parseInt(parts[0], 10));\n}\n\n/**\n * Возвращает массив дат откладки гнёзд, сортированный по возрастанию\n *\n * @param {Nest[]} nests\n * @return {string[]}\n */\nexport function getAllDatesSorted(nests) {\n  const result = [...new Set(nests.map(nest => nest.date))];\n  result.sort((a, b) => parseDate(a) - parseDate(b));\n  return result;\n}\n\n/**\n * Установить номер дня у гнезда\n *\n * @param {Nest[]} nests\n * @param {string[]} dates\n */\nexport function setDateIndex(nests, dates) {\n  for (const currentNest of nests) {\n    currentNest.dateIndex = dates.indexOf(currentNest.date);\n  }\n}\n\n/**\n * Отфильтровать только те гнёзда, которые были в этот день и раньше\n *\n * @param {Nest[]} nests\n * @param {number} dateIndex\n * @return {Nest[]}\n */\nexport function getAllNestsForSpecificDay(nests, dateIndex) {\n  return nests.filter(nest => nest.dateIndex <= dateIndex);\n}\n","export default `гнездо\tx\ty\n1\t-20,03\t56,37\n2\t-21,00\t60,37\n3\t-20,18\t62,09\n4\t-18,72\t61,41\n5\t-18,49\t60,47\n6\t-19,98\t60,07\n7\t-19,47\t58,24\n8\t-19,32\t63,52\n9\t-17,18\t52,77\n10\t-13,38\t54,46\n11\t-18,90\t56,86\n12\t-23,29\t62,07\n14\t-23,74\t60,42\n15\t-24,45\t61,60\n16\t-15,81\t57,80\n17\t-16,34\t61,21\nб/н\t-17,95\t67,16\n19\t-13,22\t63,18\n20\t-13,93\t60,99\n21\t-21,08\t58,29\n22\t-22,20\t58,28\n23\t-25,59\t60,29\n24\t-25,14\t59,47\n25\t-24,46\t59,05\n27\t-23,98\t55,76\n28\t-23,67\t54,65\n33\t-21,20\t56,35\n35\t-20,63\t54,06\n36\t-21,38\t55,03\n40\t-16,03\t51,38\n43\t-19,60\t52,46\n44\t-18,33\t51,80\n48\t-23,26\t53,36\n51\t-11,87\t50,03\n96\t-21,98\t32,08\n99\t-22,38\t29,94\n100\t-21,58\t30,78\n101\t-19,42\t32,45\n103\t-16,52\t37,20\n104\t-16,42\t38,37\n105\t-16,99\t39,99\n106\t-16,38\t42,23\n107\t-20,01\t42,34\n108\t-18,88\t44,60\n109\t-20,35\t49,20\n110\t-18,57\t47,43\n111\t-15,91\t45,99\n112\t-14,56\t47,39\n113\t-12,35\t47,20\n114\t-13,09\t45,61\n115\t-13,99\t43,59\n118\t-20,69\t22,94\n119\t-19,00\t22,98\n120\t-19,80\t25,04\n121\t-21,83\t28,81\n122\t-21,37\t27,65\n123\t-20,49\t26,63\n124\t-19,53\t26,74\n125\t-19,84\t27,85\n126\t-20,24\t29,39\n127\t-17,23\t27,86\n129\t-17,54\t26,24\n130\t-16,84\t25,00\n131\t-14,78\t24,37\n132\t-16,71\t23,07\n133\t-15,89\t21,47\n134\t-15,42\t26,32\n162\t-12,62\t29,40\n163\t-11,93\t29,92\n164\t-11,64\t27,33\n165\t-12,71\t25,12\n166\t-12,54\t26,25\n167\t-14,32\t37,90\n168\t-13,51\t38,76\n169\t-12,57\t39,92\n170\t-10,27\t40,77\nб/н\t-18,75\t46,07\n75\t-10,23\t30,94\n60\t-40,74\t44,05\n61\t-40,36\t42,63\n62\t-42,77\t40,77\n63\t-40,80\t39,53\n64\t-39,65\t37,67\n65\t-39,82\t36,32\n66\t-43,82\t34,32\n67\t-42,57\t35,13\n68\t-38,34\t37,53\n69\t-37,51\t36,04\n70\t-36,10\t35,91\n71\t-38,82\t34,63\n72\t-41,16\t31,58\n73\t-40,49\t45,57\n74\t-42,42\t44,47\n78\t-33,30\t36,42\n79\t-33,67\t34,03\n80\t-28,93\t34,03\n81\t-28,95\t37,55\n85\t-43,16\t32,76\n87\t-34,99\t39,53\n88\t-37,96\t31,89\n89\t-39,34\t31,03\n90\t-40,19\t30,41\n91\t-26,23\t34,96\n92\t-25,49\t35,00\n93\t-25,84\t33,51\n94\t-24,35\t33,60\n95\t-23,20\t35,05\n97\t-26,51\t30,21\n98\t-25,07\t29,76\n102\t-24,23\t27,35\n116\t-23,53\t23,23\n117\t-23,10\t26,85\n135\t-26,12\t22,60\n136\t-27,85\t23,45\n137\t-28,24\t25,53\n138\t-29,21\t23,34\n139\t-29,51\t25,33\n140\t-28,64\t23,77\n141\t-30,14\t26,42\n142\t-32,09\t26,05\n143\t-30,65\t27,32\n144\t-32,77\t24,77\n145\t-33,82\t25,76\n146\t-35,76\t26,11\n147\t-36,19\t25,44\n148\t-38,18\t25,15\n149\t-38,48\t27,08\n150\t-33,17\t27,95\n151\t-36,04\t29,26\n152\t-39,35\t28,98\n153\t-34,53\t31,17\n154\t-31,44\t30,61\n155\t-32,25\t29,58\n156\t-29,62\t31,83\n157\t-30,96\t32,10\n158\t-29,89\t28,33\n159\t-29,43\t29,72\n161\t-27,92\t27,25\n13\t-24,19\t39,55\n26\t-26,51\t57,12\n29\t-26,98\t53,03\n30\t-28,43\t55,92\n31\t-27,76\t51,23\n32\t-29,67\t52,84\n34\t-32,04\t53,00\n38\t-30,28\t51,95\n39\t-30,57\t52,67\n41\t-32,25\t47,18\n42\t-33,95\t46,93\n45\t-26,86\t44,58\n46\t-28,24\t46,91\n47\t-30,00\t46,11\n49\t-26,24\t45,91\n50\t-25,59\t50,33\n52\t-24,34\t48,78\n53\t-22,92\t42,41\n54\t-24,29\t43,20\n55\t-30,34\t43,65\n56\t-32,59\t41,92\n57\t-30,94\t36,92\n58\t-31,32\t38,13\n59\t-37,13\t46,34\n76\t-41,09\t49,20\n77\t-38,93\t48,01\n82\t-42,39\t51,06\n83\t-39,93\t52,04\n84\t-35,39\t51,05\n86\t-34,60\t51,65\n160\t-15,06\t29,95\n171\t-7,04\t23,46\n172\t-9,40\t25,27\n173\t-9,16\t27,08\n174\t-8,70\t25,65\n175\t-9,09\t23,02\n176\t-8,02\t26,07\n177\t-12,21\t22,28\n178\t-10,82\t23,16\n179\t-5,63\t24,66\n180\t-8,16\t21,47\n182\t-4,59\t41,49\n183\t-5,76\t40,39\n184\t-6,79\t39,25\n185\t-7,56\t41,54\n186\t-9,62\t39,62\n187\t-8,30\t37,66\n188\t-5,41\t39,19\n189\t-4,25\t39,34\n190\t-5,89\t35,50\n191\t-3,53\t28,58\n192\t-5,71\t28,76\n193\t-5,11\t27,96\n194\t-3,99\t27,96\n195\t-2,90\t27,05\n196\t-2,96\t26,10\n197\t-2,22\t25,90\n198\t-5,12\t29,48\n199\t-9,19\t29,43\n200\t-6,80\t37,19\n201\t-9,97\t21,61\n202\t-10,22\t20,67\n208\t-33,31\t56,03\n209\t-31,61\t59,70\nб/н\t-23,56\t68,15\nб/н\t-22,95\t66,96\n18\t-11,77\t62,01\n203\t-13,21\t58,88\n204\t-10,67\t51,81\n205\t-9,26\t49,54\n206\t-9,14\t48,01\n128\t-13,24\t51,36\nб/н\t-1,41\t41,08\nб/н\t-3,24\t33,78\nб/н\t-2,31\t31,12\nб/н\t-7,06\t18,59\nб/н\t-7,51\t17,96\nб/н\t-9,11\t17,91\nб/н\t-10,78\t17,69\nб/н\t-12,72\t15,79\nб/н\t-17,32\t17,57\nб/н\t-18,42\t19,06\nб/н\t-19,38\t20,59\nб/н\t-22,70\t19,87\nб/н\t-27,98\t17,68\nб/н\t-31,01\t17,79\nб/н\t-33,11\t21,42\nб/н\t-34,79\t21,75\nб/н\t-36,16\t22,13\nб/н\t-41,04\t22,86\nб/н\t-42,24\t25,43\nб/н\t-44,41\t31,42\n207\t-44,70\t34,77\nб/н\t-45,75\t36,24\nб/н\t-45,97\t50,31\nб/н\t-42,03\t56,91\n37\t-25,59\t51,38\n181\t-2,96\t40,77`;\n","import React from 'react';\nimport styles from './styles.module.css';\n\nexport default function RangeWithButtons({ value, min, max, onChange }) {\n  return (\n    <div className={styles.rangeBlock}>\n      <div>\n        <button onClick={() => value > 0 && onChange(value - 1)}>&lt;</button>\n      </div>\n      <div className={styles.rangeInput}>\n        <input\n          type=\"range\"\n          min={min}\n          max={max}\n          value={value}\n          onChange={e => onChange(Number(e.target.value))}\n        />\n      </div>\n      <div>\n        <button onClick={() => value < max && onChange(value + 1)}>&gt;</button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport AnyChart from 'anychart-react';\nimport anychart from 'anychart';\nimport * as utils from './utils';\nimport nestWithNumbersText from './demo-data/coords-with-numbers';\nimport nestWithDatesText from './demo-data/coords-with-dates';\nimport './App.css';\nimport RangeWithButtons from './components/RangeWithButtons';\n\nfunction App() {\n  const [nestDataText, setNestDataText] = useState('');\n  const [nestData, setNestData] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(0);\n  const [inputFormat, setInputFormat] = useState(utils.INPUT_FORMAT_NUMBER);\n  const [withHeader, setWithHeader] = useState(true);\n  const [firstCount, setFirstCount] = useState(3);\n  const [selectedNest, setSelectedNest] = useState(0);\n\n  const anyChartDistances = anychart.line();\n  const anyChartMap = anychart.bubble();\n  anyChartMap.minBubbleSize('0.5%');\n  anyChartMap.maxBubbleSize('5%');\n\n  useEffect(() => {\n    const nestData = utils.parseNestData(nestDataText, inputFormat, withHeader);\n    switch (inputFormat) {\n      case utils.INPUT_FORMAT_NUMBER:\n      case utils.INPUT_FORMAT_COORDINATES:\n        utils.setDistancesAndDeltas(nestData);\n        break;\n      case utils.INPUT_FORMAT_DATE: {\n        const dates = utils.getAllDatesSorted(nestData);\n        setDates(dates);\n        utils.setDateIndex(nestData, dates);\n        for (let currentDateIndex = 0; currentDateIndex < dates.length; currentDateIndex++) {\n          utils.setDistancesAndDeltas(\n            utils.getAllNestsForSpecificDay(nestData, currentDateIndex),\n            currentDateIndex\n          );\n        }\n        break;\n      }\n    }\n    setNestData(nestData);\n    setSelectedNest(0);\n    setSelectedDate(0);\n  }, [nestDataText, inputFormat, withHeader]);\n\n  useEffect(() => {\n    setDistancesGraphData(selectedNest, selectedDate);\n  }, [nestData, selectedNest, selectedDate]);\n\n  useEffect(() => {\n    setMapGraphData(nestData, selectedDate);\n  }, [nestData, selectedDate]);\n\n  function calculate() {\n    switch (inputFormat) {\n      case utils.INPUT_FORMAT_NUMBER:\n      case utils.INPUT_FORMAT_COORDINATES:\n        utils.calculateRforSpecificDay(nestData, firstCount);\n        break;\n      case utils.INPUT_FORMAT_DATE: {\n        for (let currentDateIndex = 0; currentDateIndex < dates.length; currentDateIndex++) {\n          utils.calculateRforSpecificDay(\n            utils.getAllNestsForSpecificDay(nestData, currentDateIndex),\n            firstCount,\n            currentDateIndex\n          );\n        }\n        break;\n      }\n    }\n\n    setNestData([...nestData]);\n  }\n\n  function setDistancesGraphData(selectedNest, selectedDate = 0) {\n    if (!nestData[selectedNest] || !nestData[selectedNest].distances[selectedDate]) return;\n\n    const chartData = [];\n    for (let i = 0; i < nestData[selectedNest].distances[selectedDate].length; i++) {\n      chartData.push([\n        i,\n        nestData[selectedNest].distances[selectedDate][i],\n        nestData[selectedNest].deltaDistances[selectedDate][i]\n      ]);\n    }\n    const dataSet = anychart.data.set(chartData);\n    const seriesData_1 = dataSet.mapAs({ x: 0, value: 1 });\n    const seriesData_2 = dataSet.mapAs({ x: 0, value: 2 });\n    anyChartDistances.line(seriesData_1);\n    anyChartDistances.line(seriesData_2);\n  }\n\n  function setMapGraphData(nests, selectedDate = 0) {\n    if (!nests || !nests.length) return;\n\n    const accepted = [],\n      notAccepted = [];\n    for (const nest of utils.getAllNestsForSpecificDay(nests, selectedDate)) {\n      if (nest.isAccepted[selectedDate]) {\n        accepted.push([nest.x, nest.y, nest.r[selectedDate]]);\n      } else {\n        notAccepted.push([nest.x, nest.y, 0]);\n      }\n    }\n    anyChartMap.bubble(accepted);\n    anyChartMap.bubble(notAccepted);\n  }\n\n  function setTestData(inputFormat) {\n    if (inputFormat === utils.INPUT_FORMAT_NUMBER) {\n      setNestDataText(nestWithNumbersText);\n      setInputFormat(utils.INPUT_FORMAT_NUMBER);\n      setWithHeader(true);\n    } else if (inputFormat === utils.INPUT_FORMAT_DATE) {\n      setNestDataText(nestWithDatesText);\n      setInputFormat(utils.INPUT_FORMAT_DATE);\n      setWithHeader(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div className=\"header\">\n          <h1>Nest</h1>\n        </div>\n        <div>\n          Исходная программа&nbsp;\n          <a href=\"https://github.com/dmitryweiner/nest/raw/main/nest.exe\">Nest.exe</a>,&nbsp;\n          <a href=\"https://github.com/dmitryweiner/nest/raw/main/nest.pdf\">статья</a> с объяснением\n          работы алгоритма.\n        </div>\n        <div>\n          <h4>Выберите формат входных данных:</h4>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"inputFormat\"\n              checked={inputFormat === utils.INPUT_FORMAT_COORDINATES}\n              onChange={e => e.target.checked && setInputFormat(utils.INPUT_FORMAT_COORDINATES)}\n            />\n            X Y\n          </label>\n        </div>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"inputFormat\"\n              checked={inputFormat === utils.INPUT_FORMAT_NUMBER}\n              onChange={e => e.target.checked && setInputFormat(utils.INPUT_FORMAT_NUMBER)}\n            />\n            &lt;Метка гнезда&gt; X Y\n          </label>\n        </div>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"inputFormat\"\n              checked={inputFormat === utils.INPUT_FORMAT_DATE}\n              onChange={e => e.target.checked && setInputFormat(utils.INPUT_FORMAT_DATE)}\n            />\n            &lt;Метка гнезда&gt; &lt;Дата основания&gt; X Y\n          </label>\n        </div>\n        <div>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={withHeader}\n              onChange={e => setWithHeader(e.target.checked)}\n            />\n            С заголовком\n          </label>\n        </div>\n        <div>\n          <h4>Скопируйте сюда координаты гнёзд:</h4>\n          <p>\n            Загрузить тестовые данные\n            <button onClick={() => setTestData(utils.INPUT_FORMAT_NUMBER)}>с номерами</button>\n            <button onClick={() => setTestData(utils.INPUT_FORMAT_DATE)}>с датами</button>\n          </p>\n          <div className=\"input-coordinates-block\">\n            <div className=\"input-textarea\">\n              <textarea\n                rows={10}\n                className=\"textarea-with-data\"\n                value={nestDataText}\n                onChange={e => setNestDataText(e.target.value)}\n              />\n            </div>\n            <div className=\"nest-list\">\n              <ul>\n                {nestData.map(nest => (\n                  <li key={nest.id}>\n                    <b>{nest.title ? nest.title : nest.id}</b>&nbsp;\n                    {nest.date && nest.date}&nbsp;\n                    {nest.x} {nest.y}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div>\n          <label>\n            Брать первых\n            <select value={firstCount} onChange={e => setFirstCount(e.target.value)}>\n              <option>1</option>\n              <option>2</option>\n              <option>3</option>\n              <option>4</option>\n              <option>5</option>\n              <option>6</option>\n              <option>7</option>\n            </select>\n          </label>\n        </div>\n        <div className=\"distances\">\n          <h4>Расстояния до соседей:</h4>\n          {inputFormat === utils.INPUT_FORMAT_DATE && (\n            <>\n              <p>Текущий день {dates[selectedDate]}</p>\n              <RangeWithButtons\n                value={selectedDate}\n                min={0}\n                max={dates.length - 1}\n                onChange={value => setSelectedDate(value)}\n              />\n            </>\n          )}\n          <p>Текущee гнездо {nestData[selectedNest] ? nestData[selectedNest].title : ''}</p>\n          <RangeWithButtons\n            value={selectedNest}\n            min={0}\n            max={nestData.length - 1}\n            onChange={value => setSelectedNest(value)}\n          />\n          <AnyChart\n            id=\"distances\"\n            title={`Расстояния до соседей гнезда ${\n              nestData[selectedNest] ? nestData[selectedNest].title : ''\n            }`}\n            instance={anyChartDistances}\n            height={600}\n          />\n        </div>\n        <div>\n          <button className=\"calculate-button\" onClick={() => calculate()}>\n            Рассчитать!\n          </button>\n        </div>\n        <div>\n          <h4>Результат</h4>\n          <p>\n            Можно скопировать или{' '}\n            <a\n              href={`data:text/plain;charset=UTF-8,${encodeURIComponent(\n                utils.resultToString(nestData, inputFormat).replace('\\n', '\\r\\n')\n              )}`}\n              download=\"nest_results.txt\"\n            >\n              скачать в виде файла\n            </a>\n          </p>\n          <div className=\"results-block\">\n            <div className=\"results-textarea\">\n              <textarea\n                className=\"textarea-with-data\"\n                rows={5}\n                value={utils.resultToString(nestData, inputFormat)}\n                readOnly\n              />\n            </div>\n            <div className=\"results-graph\">\n              {inputFormat === utils.INPUT_FORMAT_DATE && (\n                <>\n                  <p>Текущий день {dates[selectedDate]}</p>\n                  <RangeWithButtons\n                    value={selectedDate}\n                    min={0}\n                    max={dates.length - 1}\n                    onChange={value => setSelectedDate(value)}\n                  />\n                </>\n              )}\n              <AnyChart id=\"nest-map\" instance={anyChartMap} title=\"Карта гнёзд\" height={600} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default `1\\t28.05.17\\t-20,034\\t56,366\n2\\t28.05.17\\t-21,004\\t60,371\n3\\t25.05.17\\t-20,176\\t62,094\n4\\t23.05.17\\t-18,717\\t61,411\n5\\t25.05.17\\t-18,487\\t60,467\n6\\t23.05.17\\t-19,984\\t60,073\n7\\t23.05.17\\t-19,469\\t58,242\n8\\t29.05.17\\t-19,318\\t63,517\n9\\t26.05.17\\t-17,181\\t52,774\n11\\t23.05.17\\t-18,897\\t56,862\n12\\t01.06.17\\t-23,291\\t62,074\n13\\t28.05.17\\t-24,189\\t39,550\n15\\t24.05.17\\t-24,453\\t61,604\n16\\t30.05.17\\t-15,811\\t57,796\n17\\t22.05.17\\t-16,343\\t61,206\n18\\t21.05.17\\t-11,773\\t62,012\n19\\t28.05.17\\t-13,219\\t63,182\n20\\t23.05.17\\t-13,931\\t60,989\n21\\t23.05.17\\t-21,080\\t58,285\n24\\t18.05.17\\t-25,143\\t59,474\n25\\t31.05.17\\t-24,461\\t59,054\n26\\t27.05.17\\t-26,513\\t57,117\n28\\t27.05.17\\t-23,666\\t54,645\n29\\t01.06.17\\t-26,982\\t53,031\n30\\t23.05.17\\t-28,430\\t55,918\n31\\t29.05.17\\t-27,759\\t51,233\n32\\t26.05.17\\t-29,672\\t52,839\n33\\t23.05.17\\t-21,201\\t56,354\n34\\t24.05.17\\t-32,035\\t53,001\n35\\t26.05.17\\t-20,625\\t54,059\n36\\t27.05.17\\t-21,382\\t55,032\n37\\t25.05.17\\t-25,588\\t51,376\n38\\t27.05.17\\t-30,277\\t51,951\n40\\t28.05.17\\t-16,035\\t51,376\n41\\t29.05.17\\t-32,247\\t47,183\n42\\t24.05.17\\t-33,949\\t46,927\n43\\t21.05.17\\t-19,596\\t52,459\n44\\t01.06.17\\t-18,328\\t51,803\n46\\t28.05.17\\t-28,244\\t46,914\n47\\t27.05.17\\t-30,001\\t46,109\n49\\t30.05.17\\t-26,240\\t45,910\n50\\t24.05.17\\t-25,588\\t50,329\n51\\t28.05.17\\t-11,873\\t50,031\n52\\t25.05.17\\t-24,341\\t48,785\n55\\t22.05.17\\t-30,339\\t43,652\n56\\t28.05.17\\t-32,594\\t41,919\n57\\t27.05.17\\t-30,942\\t36,918\n59\\t25.05.17\\t-37,127\\t46,342\n60\\t22.05.17\\t-40,741\\t44,048\n61\\t26.05.17\\t-40,357\\t42,626\n63\\t26.05.17\\t-40,797\\t39,535\n64\\t26.05.17\\t-39,649\\t37,669\n65\\t26.05.17\\t-39,824\\t36,322\n66\\t30.05.17\\t-43,821\\t34,319\n67\\t24.05.17\\t-42,566\\t35,130\n69\\t29.05.17\\t-37,515\\t36,038\n70\\t25.05.17\\t-36,100\\t35,911\n72\\t27.05.17\\t-41,159\\t31,583\n73\\t30.05.17\\t-40,486\\t45,574\n74\\t30.05.17\\t-42,423\\t44,471\n76\\t23.05.17\\t-41,088\\t49,199\n77\\t19.05.17\\t-38,926\\t48,013\n78\\t22.05.17\\t-33,298\\t36,423\n79\\t25.05.17\\t-33,672\\t34,026\n80\\t20.05.17\\t-28,932\\t34,035\n82\\t03.06.17\\t-42,389\\t51,057\n83\\t25.05.17\\t-39,929\\t52,036\n84\\t29.05.17\\t-35,393\\t51,051\n85\\t24.05.17\\t-43,164\\t32,763\n86\\t26.05.17\\t-34,600\\t51,652\n87\\t24.05.17\\t-34,991\\t39,527\n88\\t25.05.17\\t-37,962\\t31,892\n90\\t25.05.17\\t-40,189\\t30,413\n91\\t23.05.17\\t-26,234\\t34,962\n92\\t21.05.17\\t-25,492\\t35,001\n93\\t24.05.17\\t-25,841\\t33,515\n94\\t23.05.17\\t-24,354\\t33,603\n95\\t25.05.17\\t-23,198\\t35,048\n96\\t29.05.17\\t-21,981\\t32,082\n97\\t24.05.17\\t-26,508\\t30,209\n98\\t26.05.17\\t-25,072\\t29,756\n99\\t19.05.17\\t-22,383\\t29,938\n100\\t23.05.17\\t-21,579\\t30,779\n103\\t26.05.17\\t-16,522\\t37,196\n104\\t22.05.17\\t-16,421\\t38,374\n105\\t21.05.17\\t-16,989\\t39,991\n107\\t23.05.17\\t-20,013\\t42,338\n108\\t24.05.17\\t-18,884\\t44,597\n110\\t26.05.17\\t-18,573\\t47,433\n111\\t27.05.17\\t-15,909\\t45,986\n112\\t21.05.17\\t-14,565\\t47,392\n113\\t27.05.17\\t-12,353\\t47,200\n114\\t27.05.17\\t-13,092\\t45,608\n115\\t22.05.17\\t-13,995\\t43,588\n116\\t24.05.17\\t-23,526\\t23,227\n117\\t25.05.17\\t-23,097\\t26,853\n118\\t26.05.17\\t-20,689\\t22,938\n121\\t28.05.17\\t-21,831\\t28,814\n122\\t21.05.17\\t-21,367\\t27,645\n123\\t29.05.17\\t-20,485\\t26,633\n125\\t28.05.17\\t-19,844\\t27,854\n126\\t24.05.17\\t-20,235\\t29,387\n130\\t28.05.17\\t-16,840\\t24,997\n131\\t27.05.17\\t-14,778\\t24,369\n132\\t26.05.17\\t-16,712\\t23,073\n133\\t23.05.17\\t-15,888\\t21,471\n134\\t27.05.17\\t-15,419\\t26,316\n135\\t27.05.17\\t-26,120\\t22,600\n137\\t25.05.17\\t-28,240\\t25,531\n139\\t19.05.17\\t-29,513\\t25,326\n140\\t22.05.17\\t-28,637\\t23,775\n141\\t27.05.17\\t-30,141\\t26,418\n142\\t24.05.17\\t-32,089\\t26,047\n144\\t25.05.17\\t-32,772\\t24,770\n145\\t21.05.17\\t-33,816\\t25,761\n146\\t21.05.17\\t-35,763\\t26,110\n149\\t26.05.17\\t-38,478\\t27,076\n150\\t21.05.17\\t-33,167\\t27,945\n151\\t25.05.17\\t-36,041\\t29,255\n152\\t31.05.17\\t-39,352\\t28,977\n153\\t29.05.17\\t-34,535\\t31,168\n154\\t24.05.17\\t-31,440\\t30,610\n155\\t23.05.17\\t-32,246\\t29,583\n156\\t27.05.17\\t-29,616\\t31,834\n157\\t25.05.17\\t-30,963\\t32,101\n158\\t27.05.17\\t-29,887\\t28,329\n159\\t23.05.17\\t-29,432\\t29,724\n160\\t26.05.17\\t-15,061\\t29,946\n161\\t22.05.17\\t-27,919\\t27,245\n162\\t27.05.17\\t-12,623\\t29,405\n163\\t22.05.17\\t-11,927\\t29,920\n164\\t25.05.17\\t-11,640\\t27,335\n165\\t23.05.17\\t-12,707\\t25,119\n166\\t28.05.17\\t-12,539\\t26,249\n167\\t23.05.17\\t-14,323\\t37,904\n168\\t23.05.17\\t-13,511\\t38,763\n169\\t23.05.17\\t-12,573\\t39,917\n170\\t21.05.17\\t-10,265\\t40,767\n172\\t21.05.17\\t-9,398\\t25,269\n173\\t24.05.17\\t-9,158\\t27,083\n174\\t26.05.17\\t-8,697\\t25,645\n175\\t23.05.17\\t-9,091\\t23,020\n177\\t24.05.17\\t-12,209\\t22,285\n180\\t23.05.17\\t-8,163\\t21,471\n181\\t23.05.17\\t-2,959\\t40,767\n183\\t27.05.17\\t-5,761\\t40,391\n184\\t26.05.17\\t-6,791\\t39,247\n185\\t21.05.17\\t-7,561\\t41,537\n186\\t22.05.17\\t-9,621\\t39,618\n187\\t23.05.17\\t-8,302\\t37,656\n188\\t29.05.17\\t-5,415\\t39,188\n189\\t27.05.17\\t-4,251\\t39,341\n190\\t03.06.17\\t-5,887\\t35,495\n191\\t24.05.17\\t-3,535\\t28,582\n192\\t22.05.17\\t-5,712\\t28,758\n193\\t22.05.17\\t-5,114\\t27,956\n195\\t27.05.17\\t-2,898\\t27,045\n196\\t23.05.17\\t-2,959\\t26,103\n197\\t25.05.17\\t-2,221\\t25,905\n198\\t21.05.17\\t-5,118\\t29,479\n199\\t22.05.17\\t-9,185\\t29,430\n201\\t26.05.17\\t-9,970\\t21,611\n202\\t26.05.17\\t-10,223\\t20,670\n203\\t23.05.17\\t-13,214\\t58,875\n204\\t29.05.17\\t-10,667\\t51,813\n205\\t26.05.17\\t-9,257\\t49,543\n206\\t28.05.17\\t-9,143\\t48,007\n207\\t26.05.17\\t-44,696\\t34,774\n208\\t25.05.17\\t-33,310\\t56,026\n209\\t01.06.17\\t-31,609\\t59,698`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}